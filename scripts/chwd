#!/usr/bin/env lua
--[[
Copyright (C) 2023 CachyOS

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
--]]
local pacman, pmconfig, pmroot, cachedir, sync

local function die(err, ...)
    print(err:format(...))
    os.exit(1)
end

local function file_exists(path)
    local file = io.open(path, "r")
    if file then
        file:close()
        return true
    else
        return false
    end
end

local function check_on_multilib()
    local multilib_pattern = "^%[multilib%]"
    for line in io.lines(pmconfig) do
        if line:match(multilib_pattern) then
            return true
        else
            return false
        end
    end
end

-- https://stackoverflow.com/questions/1426954/split-string-in-lua
local function split(str, sep)
    local t = {}
    for found in str:gmatch("([^".. sep .."]+)") do
        t[#t+1] = found
    end
    return t
end

local function get_opts(args)
    local options = {}
    local option_pattern="-%-?(.+)"

    for i = 1,#args do
        local option = args[i]
        local match = option:match(option_pattern)

        if match then
            options[match] = i
        end
    end
    return options
end

local function is_installed(package_name)
    local status = os.execute("pacman -Qqs " .. package_name .. " 1>/dev/null")
    return status
end

local function pacman_handle(action, pkgs)
    local cmd = table.concat({pacman, action, pkgs}, " ")
    local _, _, code = os.execute(cmd)
    if code ~= 0 then
       die("ERROR: Pacman command was failed! Exit code: %s", code)
    end
end

local function install(packages)
    if sync then
        pacman_handle("-Sy", "")
    end
    pacman_handle("--needed -S", packages)
end

local function remove(packages)
    packages = split(packages, " ")

    local pkgs = ""
    for _, pkg in ipairs(packages) do
        if is_installed(pkg) then
            pkgs = pkgs .. " " .. pkg
        end
    end

    if #pkgs == 0 then
        print("Nothing to remove...")
    else
        pacman_handle("-Rdd", pkgs)
    end
end

local function exec_hook(hook)
    if hook ~= "" then
        os.execute(hook)
    end
end

local function escape_pattern(text)
    return text:gsub("([^%w])", "%%%1")
end

local function get_profile(name, path)
    local profile_name_pattern = "^%[([A-Za-z0-9-. ]+)%]"
    local packages_pattern  = "^packages%s*=%s*'?\"?([A-Za-z0-9- ]+)'?\"?"
    local packages, profile, last_hook
    local hooks = {
        ["pre_install"] = "",
        ["post_install"] = "",
        ["post_remove"] = "",
        ["pre_remove"] = ""
    }

    for line in io.lines(path) do
        if profile == nil then
            profile = line:match(profile_name_pattern)
            if profile ~= name then
                profile = nil
            end
        elseif packages == nil then
            packages = line:match(packages_pattern)
        else
            if line:match(profile_name_pattern) then
                break
            end

            if last_hook == nil then
                for hook in pairs(hooks) do
                    local hook_pattern  = '^' .. escape_pattern(hook) .. '%s*=%s*"""'
                    if line:match(hook_pattern) then
                        last_hook = hook
                    end
                end
            else
                local hook_end = line:match('(.*)"""')
                if hook_end then
                    hooks[last_hook] = hooks[last_hook] .. hook_end
                    last_hook = nil
                else
                    hooks[last_hook] = hooks[last_hook] .. line .. "\n"
                end
            end
        end
    end

    if not check_on_multilib() and packages then
        packages:gsub("%s?(lib32-.+)%s?", "")
    end

    return packages, hooks
end

local function get_opt_argument(options, option, default)
    local index = options[option]
    if index == nil then
        if default then
            return default
        else
            die("The mandatory option %s is omitted", option)
        end
    else
        local option_argument = arg[index+1]
        if option_argument == nil or options[option_argument:gsub("-%-", "")] then
            die("Missing argument for option %s", option)
        else
            return option_argument
        end
    end
end

local function main()
    local options = get_opts(arg)

    cachedir = get_opt_argument(options, "cachedir", "/var/cache/pacman/pkg")
    pmroot = get_opt_argument(options, "pmroot", "/")
    pmconfig = get_opt_argument(options, "pmconfig", "/etc/pacman.conf")
    pacman = table.concat({"pacman --noconfirm", "--cachedir", cachedir, "-r", pmroot, "--config", pmconfig}, " ")
    local profile_name = get_opt_argument(options, "profile")
    local path = get_opt_argument(options, "path", "/var/lib/mhwd/db/profiles.toml")

    if options.sync then
        sync = true
    end

    if not file_exists(path) then
        die("Profiles file is not found: %s", path)
    end

    local packages, hooks = get_profile(profile_name, path)

    if not packages then
        die("Profiles not valid or not found in %s", path)
    end

    if options.install then
        exec_hook(hooks["pre_install"])
        install(packages)
        exec_hook(hooks["post_install"])
    elseif options.remove then
        exec_hook(hooks["pre_remove"])
        remove(packages)
        exec_hook(hooks["post_remove"])
    else
        die("Action is missing, exit...")
    end
end

main()
