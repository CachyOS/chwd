#!/bin/bash

MHWDDEVICES=()

### Module Functions ###

_check_on_multilib() {
    if grep -q "^\[multilib\]" "$PMCONFIG"; then
        return 0
    else
        return 1
    fi
}

_pacman_die() {
    echo "Error: pacman failed!"
    exit 1
}

MHWD_CHECK_KMODS()
{
    DEPKMODS=""

    if [ -n "${DEPKMOD}" ]; then
        for KERNEL in ${KERNELS} ; do
            if pacman -Qqs "${KERNEL}"; then
                for KMOD in ${DEPKMOD} ; do
                    DEPKMODS="${DEPKMODS} ${KMOD}"
                done
            fi
        done
    fi
}

MHWD_CHECK_PKGS()
{
    local REMOVEPKGS=""

    for PKG in ${PACKAGES} ; do
        if pacman -Qqs "${PKG}"; then
            REMOVEPKGS="${REMOVEPKGS} ${PKG}"
        fi
    done

    PACKAGES="${REMOVEPKGS}"
}

# Make them readonly
declare -fr MHWD_PCI_BUS_ID

### Main ###
PARAM=$#
PACMAN="pacman --noconfirm"
SYNC=""
ACTION=""
CONFIGPATH=""
CACHEPATH="/var/cache/pacman/pkg"
PMCONFIG="/etc/pacman.conf"
PMROOT="/"
PACKAGES=""
KERNELS=$(pacman -Qqs "^linux(.*)$" | awk '/linux/ && !/headers/ && !/doc/ && !/firmware/ && !/tool/ && !/python/ && !/sampler/ && !/steam/ && !/console/')

if [ "${PARAM}" -lt 1 ]; then
    echo "No Arguments!"
    exit 1
fi

for (( I=1; $I <= $PARAM; I++ ));do
    case "$1" in
        --install)
            ACTION="install"
        ;;
        --remove)
            ACTION="remove"
        ;;
        --sync)
            SYNC="y"
        ;;
        --cachedir)
            shift
            CACHEPATH="$1"
        ;;
        --config)
            shift
            CONFIGPATH="$1"
        ;;
        --pmconfig)
            shift
            PMCONFIG="$1"
        ;;
        --pmroot)
            shift
            PMROOT="$1"
        ;;
        --device)
            shift
            MHWDDEVICES+=("$1")
        ;;
        "")    ;;
        *)
            echo "Wrong Argument: $1"
            exit 1
        ;;
    esac

    shift
done

# Set final variables
PACMAN="${PACMAN} --cachedir ${CACHEPATH} --config ${PMCONFIG} --root ${PMROOT}"

if [ -n "${CONFIGPATH}" ] && [ -e "${CONFIGPATH}" ]; then
    echo "Sourcing ${CONFIGPATH}"
    . "${CONFIGPATH}"
else
    exit 1
fi

if [ "$ACTION" == "install" ]; then
    # Run preinstall function
    if [[ "$(type -t pre_install)" == "function" ]]; then
       pre_install
    fi

    PACKAGES=""

    [ -n "${OPTREMDEPENDS_64}" ] && OPTREMDEPENDS="${OPTREMDEPENDS} ${OPTREMDEPENDS_64}"

    # Install dependencies
    if [ -n "${DEPENDS}" ]; then
        PACKAGES="${DEPENDS}"
    fi
    if [ -n "${DEPENDS_64}" ] && _check_on_multilib; then
        PACKAGES="${PACKAGES} ${DEPENDS_64}"
    fi

    if [ -n "${DEPKMODS}" ]; then
        PACKAGES="${PACKAGES} ${DEPKMODS}"
    fi

    if [ -n "${PACKAGES}" ]; then
        ${PACMAN} --needed -S${SYNC} ${PACKAGES} || _pacman_die
        ${PACMAN} -D --asexplicit ${PACKAGES} || _pacman_die
        if [ -n "${OPTREMDEPENDS}" ]; then
            ${PACMAN} --asdeps -S ${OPTREMDEPENDS} || _pacman_die
        fi
    elif [ -n "${SYNC}" ]; then
        ${PACMAN} -S${SYNC}
    fi


    # Run postinstall function
    if [[ "$(type -t post_install)" == "function" ]]; then
       post_install
    fi
fi

if [ "$ACTION" == "remove" ]; then
    # Run preremove function
    if [[ "$(type -t pre_remove)" == "function" ]]; then
       pre_remove
    fi

    PACKAGES=""
    OPTREMPACKAGES=""

    # Check for extramodules
    MHWD_CHECK_KMODS

    # Remove dependencies
    if [ -n "${DEPENDS}" ]; then
        PACKAGES="${DEPENDS}"
    fi
    if [ -n "${DEPENDS_64}" ] && _check_on_multilib; then
        PACKAGES="${PACKAGES} ${DEPENDS_64}"
    fi
    if [ -n "${DEPKMODS}" ]; then
        PACKAGES="${PACKAGES} ${DEPKMODS}"
    fi

    # Check if packages are installed
    MHWD_CHECK_PKGS

    if [ -n "${PACKAGES}" ]; then
        ${PACMAN} -Rscn ${PACKAGES} || _pacman_die
    fi

    # Run postremove function
    if [[ "$(type -t post_remove)" == "function" ]]; then
       post_remove
    fi
fi

exit 0
