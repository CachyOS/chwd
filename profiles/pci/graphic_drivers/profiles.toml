# chwd has a sequential search for the desired profile. First it goes through
# all class_ids that indicate a device type, like GPU or network adapter. Then
# the profile specifies which manufacturer's driver we need via vendor_id,
# after which chwd select specific device in device_id or device_pattern, which
# is how much wider and includes devices of the same generation. For example:
#
# Searched for 3D controllers
# class_ids = "0302"
#
# Filters only NVIDIA GPUs
# vendor_ids = "10de"
#
# A certain device or set of ids:
# device_ids = "25a2"
#
# Or set of devices depending on the generation:
# device_name_pattern = '(AD)\w+'

[nvidia-open-dkms]
desc = 'Open source NVIDIA drivers for Linux (Latest)'
nonfree = true
class_ids = "0300 0302 0380"
vendor_ids = "10de"
priority = 10
packages = 'nvidia-utils egl-wayland nvidia-settings opencl-nvidia lib32-opencl-nvidia lib32-nvidia-utils libva-nvidia-driver vulkan-icd-loader lib32-vulkan-icd-loader'
conditional_packages = """
    kernels="$(pacman -Qqs "^linux-cachyos")"
    modules=""

    for kernel in $kernels; do
        case "$kernel" in
            *-nvidia-open) modules+=" ${kernel}";;
            *-headers|*-zfs|*-nvidia|*-dbg);;
            *) modules+=" ${kernel}-nvidia-open";;
        esac
    done

    # Fallback if there are no kernels with pre-built modules
    [ -z "$modules" ] && modules="nvidia-open-dkms"

    echo "$modules"

"""
post_install = """
    cat <<EOF >/etc/mkinitcpio.conf.d/10-chwd.conf
# This file is automatically generated by chwd. PLEASE DO NOT EDIT IT.
MODULES+=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)
EOF
    mkinitcpio -P

    # Add libva-nvidia-driver to profile
    echo "export LIBVA_DRIVER_NAME=nvidia" > /etc/profile.d/nvidia-vaapi.sh
"""
post_remove = """
    rm -f /etc/mkinitcpio.conf.d/10-chwd.conf
    rm -f /etc/profile.d/nvidia-vaapi.sh
    mkinitcpio -P
"""
device_name_pattern = "([A-Z]+[0-9]+[^M]*)[[:blank:]].*"

[nvidia-open-dkms.prime]
desc = 'Open source NVIDIA drivers for Linux (Latest)'
class_ids = "0300 0302 0380"
device_name_pattern = "([A-Z]+[0-9]+[A-Z]*M)[[:blank:]].*"
priority = 11
packages = 'nvidia-utils egl-wayland nvidia-settings opencl-nvidia lib32-opencl-nvidia lib32-nvidia-utils libva-nvidia-driver vulkan-icd-loader lib32-vulkan-icd-loader nvidia-prime switcheroo-control'
post_install = """
    cat <<EOF >/etc/mkinitcpio.conf.d/10-chwd.conf
# This file is automatically generated by chwd. PLEASE DO NOT EDIT IT.
MODULES+=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)
EOF
    mkinitcpio -P
    systemctl enable switcheroo-control

    # Workaround to fix broken RTD3 on GNOME, which keeps taking up 1MB of VRAM
    # without letting the dGPU fully sleep or keeping it running for long
    # periods of time.
    # See: https://gitlab.gnome.org/GNOME/mutter/-/issues/2969
    echo "export __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json" > /etc/profile.d/nvidia-rt3d-workaround.sh
"""
post_remove = """
    rm -f /etc/mkinitcpio.conf.d/10-chwd.conf
    rm -f /etc/profile.d/nvidia-rt3d-workaround.sh
    mkinitcpio -P
"""


[nvidia-dkms]
desc = 'Closed source NVIDIA drivers for Linux (Latest)'
nonfree = true
class_ids = "0300 0302 0380"
vendor_ids = "10de"
priority = 12
packages = 'nvidia-utils egl-wayland nvidia-settings opencl-nvidia lib32-opencl-nvidia lib32-nvidia-utils libva-nvidia-driver vulkan-icd-loader lib32-vulkan-icd-loader'
conditional_packages = """
    kernels="$(pacman -Qqs "^linux-cachyos")"
    modules=""

    for kernel in $kernels; do
        case "$kernel" in
            *-headers|*-zfs|*-nvidia-open|*-dbg);;
            *-nvidia) modules+=" ${kernel}";;
            *) modules+=" ${kernel}-nvidia";;
        esac
    done

    # Fallback if there are no kernels with pre-built modules
    [ -z "$modules" ] && modules="nvidia-dkms"

    echo "$modules"

"""
post_install = """
    cat <<EOF >/etc/mkinitcpio.conf.d/10-chwd.conf
# This file is automatically generated by chwd. PLEASE DO NOT EDIT IT.
MODULES+=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)
EOF
    mkinitcpio -P

    # Add libva-nvidia-driver to profile
    echo "export LIBVA_DRIVER_NAME=nvidia" > /etc/profile.d/nvidia-vaapi.sh
"""
post_remove = """
    rm -f /etc/mkinitcpio.conf.d/10-chwd.conf
    rm -f /etc/profile.d/nvidia-vaapi.sh
    mkinitcpio -P
"""
device_name_pattern = "(GM|GP[0-9]+[^M]*)[[:blank:]].*"

[nvidia-dkms.prime]
desc = 'Closed source NVIDIA drivers for Linux (Latest)'
class_ids = "0300 0302 0380"
device_name_pattern = "(GM|GP[0-9]+[A-Z]*M)[[:blank:]].*"
priority = 13
packages = 'nvidia-utils egl-wayland nvidia-settings opencl-nvidia lib32-opencl-nvidia lib32-nvidia-utils libva-nvidia-driver vulkan-icd-loader lib32-vulkan-icd-loader nvidia-prime switcheroo-control'
post_install = """
    cat <<EOF >/etc/mkinitcpio.conf.d/10-chwd.conf
# This file is automatically generated by chwd. PLEASE DO NOT EDIT IT.
MODULES+=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)
EOF
    mkinitcpio -P
    systemctl enable switcheroo-control

    # Workaround to fix broken RTD3 on GNOME, which keeps taking up 1MB of VRAM
    # without letting the dGPU fully sleep or keeping it running for long
    # periods of time.
    # See: https://gitlab.gnome.org/GNOME/mutter/-/issues/2969
    echo "export __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json" > /etc/profile.d/nvidia-rt3d-workaround.sh
"""
post_remove = """
    rm -f /etc/mkinitcpio.conf.d/10-chwd.conf
    rm -f /etc/profile.d/nvidia-rt3d-workaround.sh
    mkinitcpio -P
"""

[nvidia-dkms-470xx]
desc = 'Closed source NVIDIA drivers for Linux (470xx branch, only for Kepler GPUs)'
priority = 14
nonfree = true
class_ids = "0300 0380"
vendor_ids = "10de"
packages = 'nvidia-470xx-dkms nvidia-470xx-utils nvidia-470xx-settings opencl-nvidia-470xx vulkan-icd-loader lib32-nvidia-470xx-utils lib32-opencl-nvidia-470xx lib32-vulkan-icd-loader libva-nvidia-driver'
device_name_pattern = '(GK)\w+'
post_install = """
    # Add libva-nvidia-driver to profile
    echo "export LIBVA_DRIVER_NAME=nvidia" > /etc/profile.d/nvidia-vaapi.sh
"""
post_remove = """
    rm -f /etc/profile.d/nvidia-vaapi.sh
"""

[nvidia-dkms-470xx.prime]
desc = 'Closed source NVIDIA drivers for Linux (470xx branch, only for Kepler GPUs)'
priority = 15
class_ids = "0302"
packages = 'nvidia-470xx-dkms nvidia-470xx-utils nvidia-470xx-settings opencl-nvidia-470xx vulkan-icd-loader lib32-nvidia-470xx-utils lib32-opencl-nvidia-470xx lib32-vulkan-icd-loader libva-nvidia-driver switcheroo-control nvidia-prime'
device_name_pattern = '(GK)\w+'
post_install = """
    systemctl enable switcheroo-control
"""

[nvidia-dkms-390xx]
desc = 'Closed source NVIDIA drivers for Linux (390xx branch, only for Fermi GPUs)'
priority = 16
nonfree = true
vendor_ids = "10de"
class_ids = "0300 0302 0380"
packages = 'nvidia-390xx-dkms nvidia-390xx-utils nvidia-390xx-settings opencl-nvidia-390xx nvidia-390xx-utils nvidia-390xx-settings opencl-nvidia-390xx lib32-nvidia-390xx-utils lib32-opencl-nvidia-390xx'
device_name_pattern = '(GF)\w+'

[nouveau]
desc = "Open Nouveau driver for NVIDIA graphics cards (Only for old GPUs)"
nonfree = false
class_ids = "0300 0302"
vendor_ids = "10de"
priority = 0
packages = 'mesa lib32-mesa libva-mesa-driver mesa-vdpau lib32-libva-mesa-driver vulkan-nouveau'
conditional_packages = """
if ! lspci -d "*:*:030x" | grep -q NVIDIA; then
    echo "opencl-rusticl-mesa lib32-opencl-rusticl-mesa"
fi
"""

[intel]
desc = "Mesa open source driver for Intel"
nonfree = false
class_ids = "0300 0302"
vendor_ids = "8086"
device_ids = "*"
priority = 4
packages = 'mesa lib32-mesa libva-intel-driver lib32-libva-intel-driver vulkan-intel lib32-vulkan-intel intel-media-driver intel-compute-runtime intel-oneapi-compiler-shared-runtime mesa-vdpau lib32-mesa-vdpau'
conditional_packages = """
if ! lspci -d "*:*:030x" | grep -q NVIDIA; then
    echo "opencl-rusticl-mesa lib32-opencl-rusticl-mesa"
fi
"""

[amd]
desc = "Mesa open source driver for AMD"
nonfree = false
class_ids = "0300 0302"
vendor_ids = "1002"
device_ids = "*"
priority = 4
packages = 'mesa lib32-mesa vulkan-radeon lib32-vulkan-radeon libva-mesa-driver lib32-libva-mesa-driver mesa-vdpau lib32-mesa-vdpau'
conditional_packages = """
if ! lspci -d "*:*:030x" | grep -q NVIDIA; then
    echo "opencl-rusticl-mesa lib32-opencl-rusticl-mesa"
fi
"""

[fallback]
desc = 'Fallback profile'
nonfree = false
class_ids = "0300 0380 0302"
vendor_ids = "1002 8086 10de"
device_ids = "*"
priority = 3
packages = 'mesa lib32-mesa vulkan-swrast xf86-video-vesa'

[virtualmachine]
desc = 'X.org vmware video driver and open-vm-tools/virtualbox tools'
nonfree = false
class_ids = "0300"
# Virtualbox version 6.0 uses VMSVGA on Linux guests by default, which has VMWare's VENDORID.
# VENDOR VMWare=80ee Virtualbox=15AD Redhat(QXL)=1af4 Redhat(VirtIO)=1b36 cirrus=1013
vendor_ids = "80ee 15AD 1af4 1b36 1013 1234"
device_ids = "*"
priority = 5
packages = 'virtualbox-guest-utils xf86-video-vmware open-vm-tools xf86-input-vmmouse spice-vdagent qemu-guest-agent vulkan-virtio gtkmm3'
post_install = """
    if [[ "$(systemd-detect-virt)" == "oracle" ]]; then
        # Virtualbox detected

        # Load kernel modules and sync clock
        systemctl enable --now --no-block vboxservice.service
    else

        if [[ "$(systemd-detect-virt)" == "vmware" ]]; then
            # Vmware detected
            systemctl enable --now --no-block vmtoolsd.service
        else
            cat <<EOF >/etc/mkinitcpio.conf.d/10-chwd.conf
# This file is automatically generated by chwd. PLEASE DO NOT EDIT IT.
MODULES+=(virtio virtio_blk virtio_pci virtio_net)
EOF
            mkinitcpio -P
        fi
    fi
    if [[ -e /etc/gdm/custom.conf ]]; then
        sed -i -e 's|#WaylandEnable=false|WaylandEnable=false|g' /etc/gdm/custom.conf
    fi"""
post_remove = """
    if [[ "$(systemd-detect-virt)" == "oracle" ]]; then
        # Virtualbox detected
        systemctl disable --now vboxservice.service
    elif [[ "$(systemd-detect-virt)" == "vmware" ]]; then
        # Vmware detected
        systemctl disable --now vmtoolsd.service
    else
        rm -f /etc/mkinitcpio.conf.d/10-chwd.conf
        mkinitcpio -P
    fi"""
